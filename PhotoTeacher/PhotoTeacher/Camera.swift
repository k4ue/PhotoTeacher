//
//  Camera.swift
//  PhotoTeacher
//
//  Created by Kau√™ Sales on 16/04/20.
//  Copyright ¬© 2020 Grupo 5. All rights reserved.
//

import UIKit
import AVFoundation


class üì∑: UIViewController{
    
    // - MARK: Variaveis de inicializacao
    
    //A view que mostrar√° o video da üì∑
    @IBOutlet weak var cameraView: UIView!

    /*Inicia a sess√£o de captura que aceita entradas de dados dos dispositivos de captura (üì∑/üé§).
     Coordena o direcionamento desses dados para as saidas de processamento que resultam em um video ou uma foto.*/
    var sessaoDeCaptura: AVCaptureSession?
    
    /*A sessao de captura ir√° streammar o conteudo da üì∑ para o layer de video*/
    var videoPreviewLayer: AVCaptureVideoPreviewLayer? //Layer do video da camera
    
    //Declarando a üì∑ inicialmente como traseira.
    var üì∏ = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)
    
    //variavel que conter√° a imagem que ser√° mandada para a galeria
    var üåÑ: UIImage!
    
    //Armazena os dados que vem da saida da üì∑
    var capturarFotoOutput: AVCapturePhotoOutput?
    
    // - MARK: Variaveis de Configura√ß√£o
    
    
    
    /*Possibilitar√° diferentes configura√ß√µes como foco, flash, qualidade, etc. Ser√° usada
    na captura*/
    var configuracoesDeCaptura: AVCapturePhotoSettings!
    
    //Ser√° usada para auxiliar no controle do Flash
    var üî¶: AVCaptureDevice.FlashMode = .auto
    
    @IBOutlet weak var composicaoImageView: UIImageView!
    

    //Diferentes composi√ß√µes que ser√£o mostradas na tela
    enum composicao{
        case grid//grid 3x3
        case aurea //propor√ß√£o aurea
        case off //tela sem nada
    }
    
    //Inicializa√ß√£o que ser√° usada para trocar as grades
    var composicaoAtual: composicao = .off
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.navigationController?.setNavigationBarHidden(true, animated: true)
        
        // - MARK: Verificar permiss√£o
        
        //Verifica o status de permiss√£o e abre a c√¢mera se, e somente se, o usu√°rio autorizou previamente.
        switch AVCaptureDevice.authorizationStatus(for: .video) {
            
            case .authorized: // O usuario permitiu acesso a camera
                //setupCamera(cameraPreferida: üì∏) //O padr√£o √© iniciar a camera traseira
            break
            //O usuario ainda n√£o decidiu, mas far√° a decis√£o agora.
            case .notDetermined:
                AVCaptureDevice.requestAccess(for: .video) { granted in
                    if granted {
                        self.setupCamera(cameraPreferida: self.üì∏)
                    }
                }
            
            case .denied: // O usuario negou acesso
                return

            case .restricted: // Dificil, mas, o usuario n√£o pode permitir acesso
                return
            
        @unknown default:
            fatalError() // BURN üî•
        }
    }
    
    // - MARK: A√ß√µes do Usuario
    
    /*Onde a m√°gica acontece. Essa fun√ß√£o junta todas as configura√ß√µes realizadas
     e chama o delegate final onde a captura √© realizada e a foto adicionada a galeria*/
    @IBAction func botaoDeCapturaPressionado(_ sender: Any) {
        guard let capturarFotoOutput = self.capturarFotoOutput else {
                   return
               }
        
        //inicia algumas configura√ßoes pra imagem a ser capturada. Coloquei alta qualidade
        let configFoto = AVCapturePhotoSettings()
        configFoto.isHighResolutionPhotoEnabled = true //habilitando alta resolu√ß√£o
        configFoto.flashMode = üî¶ //pega a configura√ß√£o setada pela fun√ß√£o de flash
        /*Isso aqui √© uma delegate. Desculpa, eu realmente n√£o peguei muito bem o que acontece aqui*/
        
        /*Da uma escurecida na tela que funciona como um feedback visual de que a foto foi tirada*/
        DispatchQueue.main.async {
            self.cameraView.layer.opacity = 0
            UIView.animate(withDuration: 0.25){
                self.cameraView.layer.opacity = 1
            }
        }
        capturarFotoOutput.capturePhoto(with: configFoto, delegate: self)
    }
    
    /*Ao pressionar 'Rotate', essa fun√ß√£o verifica qual c√¢mera est√° ativa, encerra a sess√£o atual e
     ao verificar se a camera alvo est√° conectada, reinicia a sessao com a camera trocada
     */
    @IBAction func trocarCamera(_ sender: AVCaptureDevice!) {
        //ENTENDER MELHOR O QUE EST√Å ACONTECENDO AQUI ü§î
        guard let cameraInputAtual: AVCaptureInput = sessaoDeCaptura?.inputs.first else{
                  return
              }
        
        if let input = cameraInputAtual as? AVCaptureDeviceInput{
            
            //Parar a sess√£o de captura para realizar a troca
            sessaoDeCaptura?.stopRunning()
            
            switch input.device.position{
            case .back:
                üì∏ = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .front)
            case .front:
                üì∏ = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)
            
            case .unspecified:
                print("posi√ß√£o da camera desconhecida. Retornando para traseira")
                üì∏ = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .back)
                
            @unknown default:
                fatalError() //XABLAU üî•
            }
        }
    }
    
    /*Verifica os diferentes modos de flash e alterna entre eles*/
    @IBAction func alternarModoFlash(_ sender: Any) {
        
        switch üî¶{
        case .auto: //Caso esteja automatico, troca para ativo
            üî¶ = .on
            (sender as AnyObject).setTitle("on", for: .normal)
        case .on: //Caso esteja ativo, troca para desativado
            üî¶ = .off
            (sender as AnyObject).setTitle("off", for: .normal)
        case .off: //caso desativado, troca para flash automatico, mantendo o loop
            üî¶ = .auto
            (sender as AnyObject).setTitle("auto", for: .normal)
        @unknown default:
            fatalError() //MEEEEEEEEEEEEEEE D:
        }
    }
    
    /*Mostra ao usuario diferentes tipos de composi√ß√£o disponiveis
     Verifica o estado atual e realiza a troca usando a variavel composi√ß√£o atual.
     Recebe a√ß√µes do bot√£o "Grade"*/
    @IBAction func alternarComposicaoAtual(_ sender: Any) {
        
        switch composicaoAtual{
        case .off: //Caso esteja desativada, ativa a grade ao ser pressionado
            print("Trocando para grade")
            composicaoAtual = .grid
            
            composicaoImageView.isHidden = false
            composicaoImageView.image = UIImage(named: "grade")
            (sender as AnyObject).setTitle("grade", for: .normal)
            
        case .grid: //Caso grade esteja ativa, troca para propo√ß√£o aurea
            print("trocando para propor√ß√£o aurea")
            composicaoAtual = .aurea
            composicaoImageView.image = UIImage(named: "aurea")
            (sender as AnyObject).setTitle("aurea", for: .normal)
        
        case .aurea: //caso aurea esteja ativa, troca para off e reinicia o loop
            print("desativando composi√ß√µes")
            composicaoAtual = .off
            composicaoImageView.isHidden = true
            (sender as AnyObject).setTitle("off", for: .normal)
        }
    }
    
    /*Bom, aqui o rol√™ engasga n√©, minha gente? Circulando.
     Mentira, vou tentar explicar! Essa fun√ß√£o usa o reconhecedor de toques na tela para pegar as coordenadas do toque. Como as coordenadas da camera view v√£o de [0,0] (parte superior esquerda) e v√£o at√© [1,1](canto inferior direito), as coordenadas recebidas devem ser tratadas de acordo com a view, ent√£o elas s√£o divididas pela altura e largura da mesma. Ent√£o a c√¢mera √© travada para configura√ß√µes e as mesmas coordenadas s√£o usadas para definir de maniera inteligente o ponto de interesse e de quebra a exposi√ß√£o.*/
    @IBAction func toqueParaFocar(_ sender: UITapGestureRecognizer) {
        if(sender.state == .ended){
            let estePontoFocal = sender.location(in: cameraView)
            
            print("Focando em \(estePontoFocal)")
            
            let focoPosicaoX = estePontoFocal.x / cameraView.frame.size.width
            let focoPosicaoY = estePontoFocal.x / cameraView.frame.size.height
            
            if(üì∏!.isFocusModeSupported(.autoFocus) && üì∏!.isFocusPointOfInterestSupported){
                do{
                    try üì∏?.lockForConfiguration()
                    üì∏?.focusMode = .autoFocus
                    üì∏?.focusPointOfInterest = CGPoint(x: focoPosicaoX, y: focoPosicaoY)
                    
                    if(üì∏!.isExposureModeSupported(.autoExpose) && üì∏!.isExposurePointOfInterestSupported){
                        üì∏?.exposureMode = .autoExpose
                        üì∏?.exposurePointOfInterest = CGPoint(x: focoPosicaoX, y: focoPosicaoY)
                    }
                    
                    üì∏?.unlockForConfiguration()
                } catch{
                    print(error)
                }
            }
        }
    }
    
    
    @IBAction func fecharCamera(_ sender: Any) {
        _ = navigationController?.popViewController(animated: true)
    }
    
    // - MARK: INICIAR CAMERA
    
    func setupCamera(cameraPreferida: AVCaptureDevice!){
        let dispositivoDeCaptura = cameraPreferida
        do{
            let input = try AVCaptureDeviceInput(device: dispositivoDeCaptura!) //diz que a imagem vira da camera setada
            sessaoDeCaptura = AVCaptureSession() //declara a sessao de captura
            sessaoDeCaptura?.addInput(input) //Seta a camera recebida como entrada da sessao
            videoPreviewLayer = AVCaptureVideoPreviewLayer(session: sessaoDeCaptura!)
            videoPreviewLayer?.frame = view.layer.bounds // que? KKKKKJJJ
            cameraView.layer.addSublayer(videoPreviewLayer!) //Adiciona o video para ser visto
            sessaoDeCaptura?.startRunning() //inicia a sessao
            view.sendSubviewToBack(cameraView) //para que a camera n√£o cubra os botoes
        } catch{
            print("ERRO üò±")
        }
        
        //Eu ainda n√£o entendo bem o que ta acontecendo aqui embaixo, mas deixa pra depois
        composicaoImageView.isHidden = true
        capturarFotoOutput = AVCapturePhotoOutput()
        capturarFotoOutput?.isHighResolutionCaptureEnabled = true
        sessaoDeCaptura?.addOutput(capturarFotoOutput!)
        
    }
}



extension üì∑: AVCapturePhotoCaptureDelegate{
    
    //Eu nao sei bem como funciona, mas ele pega o output e salva na galeria
    func photoOutput(_ output: AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVCapturePhoto, error: Error?) {
        if let dadosDaImagem = photo.fileDataRepresentation(){
            üåÑ = UIImage(data: dadosDaImagem)
            UIImageWriteToSavedPhotosAlbum(üåÑ, nil, nil, nil)
        }
    }
}
